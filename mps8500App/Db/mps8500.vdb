#! Generated by VisualDCT v2.6.1280
#! DBDSTART
#! DBDEND


#
# Danfysik SYSTEM MPS 8500 power supply
#
# macros required:
#
#  HWUNIT              : dev asyn channel name
#  SYSDEV              : Quite generic single name component
# 
#
#  started from  J.Priller's SYS9100.db
#  2016-08-01  J.Priller  original version
#
#  author : Jeong Han Lee
#  email  : jeonghan.lee@gmail.com
#  Date   : 
#  version : 0.0.1
#
#------------------------------------------------------------------------------
# CLOCK
# 
#
record(stringin, "$(SYSDEV)Clock") {
  field(DESC, "The internal clock time")
  field(DTYP, "stream")
  field(INP, "@mps8500.proto getVal(CLOCK,s) $(HWUNIT)")
  field(SCAN, "1 second")
}

#------------------------------------------------------------------------------
#
# LOC : switch the line-in-command to the local line
# REM : switch the line-in-command to the remote line
#
# CMD and CMDSTATE have the different outputs, the first attempt to use CMD
# instead of CMDSTATE. However, in case we have to use CMDSTATE, select
# MBBO/MBBI other than BO/BI
#
#------------------------------------------------------------------------------
record(mbbo, "$(SYSDEV)RMT_CMD") {
  field(DESC, "Remote Interface Mode")
  field(DTYP, "stream")
  field(OUT, "@mps8500.proto setRemoteMode($(SYSDEV)RMT_STS) $(HWUNIT)")
  field(ZRST, "Local")
  field(ZRVL, "0")
  field(ONST, "Remote")
  field(ONVL, "1")
  field(TWST, "INVALID")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  field(FLNK, "$(SYSDEV)RMT_RSTS")
  field(PINI, "YES")
}

# CMD
#      REM
#      LOC
#      error message
# 
# CMDSTATE
#      REMOTE
#      LOCAL
#      LOCK
#      error message
#
record(mbbi, "$(SYSDEV)RMT_RSTS") {
  field(DESC, "Remote Interface Mode Status")
  field(DTYP, "stream")
  field(INP, "@mps8500.proto getRemoteMode $(HWUNIT)")
  field(ZRST, "Local")
  field(ZRVL, "0")
  field(ONST, "Remote")
  field(ONVL, "1")
  field(TWST, "INVALID")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
}

record(stringout, "$(SYSDEV)RMT_STS") {
  field(DESC, "RMT Answer and Errors Status")
  field(DTYP, "Soft Channel")
}

# ----------------------------------------------------------
# RLOCK
# 
# No way to get RLOCK state, so use the Soft Channel to keep
# their messages 
# ----------------------------------------------------------
record(stringin, "$(SYSDEV)RLOC_CMD") {
  field(DESC, "Lock the line-in command to the remote")
  field(DTYP, "stream")
  field(INP, "@mps8500.proto setRemLock($(SYSDEV)RLOC_STS) $(HWUNIT)")
}

record(stringout, "$(SYSDEV)RLOC_STS") {
  field(DESC, "RLOCK Answer and Errors Status")
  field(DTYP, "Soft Channel")
}

# ----------------------------------------------------------
# S1H 
# Return 24 internal status in HEX
# 24 bit, so we have to divide two 12 bit records
# _desc_ mbbi are used to identify its corresponding name only.
# 
# bit 0  - 11, Char 24 - 13 : First 12 bits
# bit 12 - 23, Char 14 -  1 : Second 12 bits
# See page 31, Programmers Guide MPS 8500 Standard Commands
#
#
record(longin, "$(SYSDEV)S1-sts_") {
  field(DESC, "Status 1 HEX")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(INP, "@mps8500.proto getStatusWord1 $(HWUNIT)")
  field(PINI, "YES")
}

record(calc, "_$(SYSDEV)S1-1sts_") {
  field(DESC, "First 12 Bits of SH1 Return")
  field(SCAN, "Passive")
  field(CALC, "(A&0x0000FFF)")
  field(INPA, "$(SYSDEV)S1-sts_ CPP")
  field(FLNK, "$(SYSDEV)S1-bit1_sts")
}

record(mbbiDirect, "$(SYSDEV)S1-bit1_sts") {
  field(DESC, "Status 1 HEX Set 1")
  field(SCAN, "Passive")
  field(INP, "_$(SYSDEV)S1-1sts_.VAL")
}

record(mbbi, "$(SYSDEV)S1-bit1_desc") {
  field(ZRST, "Spare")
  field(ONST, "PS Not Ready")
  field(TWST, "Magnet Over Temperature")
  field(THST, "Magnet Waterflow Failure")
  field(FRST, "Panic Button Door Switch")
  field(FVST, "PS Over Temperature")
  field(SXST, "Thermal Breaker Fuses")
  field(SVST, "Earth Leakage Failure")
  field(EIST, "PS Waterflow Failure")
  field(NIST, "Phase Failure")
  field(TEST, "Preregulator Failure")
  field(ELST, "Regulation module Failure")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
}

record(calc, "_$(SYSDEV)S1-2sts_") {
  field(DESC, "Second 12 Bits of SH1 Return")
  field(SCAN, "Passive")
  field(CALC, "(A&0xFFF000)>>12")
  field(INPA, "$(SYSDEV)S1-sts_ CPP")
  field(FLNK, "$(SYSDEV)S1-bit2_sts")
}

record(mbbiDirect, "$(SYSDEV)S1-bit2_sts") {
  field(DESC, "Status 1 HEX Set 2")
  field(SCAN, "Passive")
  field(INP, "_$(SYSDEV)S1-2sts_.VAL")
}

record(mbbi, "$(SYSDEV)S1-bit2_desc") {
  field(ZRST, "DC Overload")
  field(ONST, "DC Overcurrent - OCP")
  field(TWST, "Sum - Interlock")
  field(THST, "One Transistor Fault")
  field(FRST, "Spare Interlock")
  field(FVST, "Unit")
  field(SXST, "DAC17")
  field(SVST, "DAC16")
  field(EIST, "Regulation Transformer")
  field(NIST, "Polarity Reversed")
  field(TEST, "Polarity Normal")
  field(ELST, "Main Power Off")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
}

# record(mbbiDirect, "$(SYSDEV)S1-2sts_") {
#     field(DESC, "Status 1 HEX Set2")
#     field(SHFT, 4)
# }
# #------------------------------------------------------------------------------
# # temperature
# #------------------------------------------------------------------------------
# record(longin, "$(SYSDEV)T_RD")
# {
#   field(DESC, "Temperature")
#   field(DTYP, "stream")
#   field(SCAN, "2 second")
#   field(EGU,  "degC")
#   field(INP,  "@mps8500.proto getAD(1) $(HWUNIT)")
#   field(ADEL, "1")
# }
# #------------------------------------------------------------------------------
# # current reading
# #------------------------------------------------------------------------------
# record(longin, "_$(SYSDEV)i_rd_raw")
# {
#   field(DESC, "Output current reading")
#   field(DTYP, "stream")
#   field(SCAN, ".2 second")
#   field(EGU,  "1/100")
#   field(INP,  "@mps8500.proto getAD(8) $(HWUNIT)")
#   field(ADEL, "1")
#   field(FLNK, "$(SYSDEV)I_RD_UNSC  PP NMS")
# }
# record(calc, "$(SYSDEV)I_RD")
# {
#   field(DESC, "Output current reading")
#   field(SCAN, "Passive")
#   field(PREC, "3")
#   field(EGU,  "A")
#   field(CALC, "A/100")
#   field(INPA, "_$(SYSDEV)i_rd_raw  NPP MS")
#   field(ADEL, "0.1")
# }
# #------------------------------------------------------------------------------
# # voltage reading
# #------------------------------------------------------------------------------
# record(longin, "_$(SYSDEV)v_rd_raw")
# {
#   field(DESC, "Output voltage reading raw")
#   field(DTYP, "stream")
#   field(SCAN, ".2 second")
#   field(EGU,  "")
#   field(INP,  "@mps8500.proto getAD(12) $(HWUNIT)")
#   field(ADEL, "1")
#   field(FLNK, "$(SYSDEV)V_RD  PP NMS")
# }
# record(calc, "$(SYSDEV)V_RD")
# {
#   field(DESC, "Output voltage reading")
#   field(SCAN, "Passive")
#   field(PREC, "2")
#   field(EGU,  "V")
#   field(CALC, "A/10")
#   field(INPA, "_$(SYSDEV)v_rd_raw  NPP MS")
#   field(ADEL, "0.1")
# }
# #------------------------------------------------------------------------------
# # current setting readback
# #------------------------------------------------------------------------------
# record(longin, "_$(SYSDEV)i_rset_raw")
# {
#   field(DESC, "Current set readback, raw")
#   field(DTYP, "stream")
#   field(SCAN, ".2 second")
#   field(EGU,  "")
#   field(INP,  "@mps8500.proto getDA(0) $(HWUNIT)")
#   field(ADEL, "1")
# }
# record(calc, "$(SYSDEV)I_RSET")
# {
#   field(DESC, "Current set readback")
#   field(SCAN, "Passive")
#   field(EGU,  "A")
#   field(PREC, "3")
#   field(CALC, "A/1000.0")
#   field(INPA, "_$(SYSDEV)i_rset_raw  CP MS")
#   field(ADEL, "0.01")
# }
# #------------------------------------------------------------------------------
# # current setting
# #------------------------------------------------------------------------------
# record(ao, "$(SYSDEV)I_CSET")
# {
#   field(DESC, "Current setting")
#   field(SCAN, "Passive")
#   field(EGU,  "A")
#   field(PREC, "3")
#   field(DRVL, "$(MIN)")
#   field(DRVH, "$(MAX)")
#   field(ADEL, "0.01")
#   field(FLNK, "_$(SYSDEV)i_cset_raw")
# }
# record(calcout, "_$(SYSDEV)i_cset_raw")
# {
#   field(DESC, "Current setting, raw")
#   field(DTYP, "stream")
#   field(SCAN, "Passive")
#   field(EGU,  "")
#   field(PREC, "3")
#   field(CALC, "A*1000")
#   field(INPA, "$(SYSDEV)I_CSET_UNSC  NPP NMS")
#   field(OUT,  "@mps8500.proto setDA(0) $(HWUNIT)")
#   field(OOPT, "Every Time")
#   field(ADEL, "0.01")
# }
# #------------------------------------------------------------------------------
# # device on command
# #------------------------------------------------------------------------------
# record(bo, "$(SYSDEV)ON_CMD")
# {
#   field(DESC, "Device on/off cmd")
#   field(DTYP, "stream")
#   field(SCAN, "Passive")
#   field(OUT,  "@mps8500.proto setOnOff $(HWUNIT)")
#   field(ONAM, "On")
#   field(ZNAM, "Off")
# }
# #------------------------------------------------------------------------------
# # device reset command
# #------------------------------------------------------------------------------
# record(bo, "$(SYSDEV)RST_CMD")
# {
#   field(DESC, "Device reset cmd")
#   field(DTYP, "stream")
#   field(SCAN, "Passive")
#   field(OUT,  "@mps8500.proto reset $(HWUNIT)")
#   field(ONAM, "Reset")
#   field(ZNAM, "0")
# }
#------------------------------------------------------------------------------
# test command/query interface
#------------------------------------------------------------------------------
record(stringout, "_$(SYSDEV)RAW_CMD") {
  field(DESC, "raw command")
  field(SCAN, "Passive")
  field(DTYP, "stream")
  field(OUT, "@mps8500.proto sendRawCommand $(HWUNIT)")
}

# With the simulator, we can set the status 1 bit via
# caput _$(SYSDEV)RAW_QUERY "SETBIT 0xF00006"
record(stringout, "_$(SYSDEV)RAW_QUERY") {
  field(DESC, "raw query")
  field(SCAN, "Passive")
  field(DTYP, "stream")
  field(OUT, "@mps8500.proto sendRawQuery(_$(SYSDEV)RAW_REPLY.VAL) $(HWUNIT)")
}

record(stringin, "_$(SYSDEV)RAW_REPLY") {
  field(DESC, "raw query reply")
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
}

#! Further lines contain data used by VisualDCT
#! View(1784,0,1.0)
#! Record("$(SYSDEV)Clock",20,28,0,0,"$(SYSDEV)Clock")
#! Record("$(SYSDEV)RMT_CMD",260,17,0,0,"$(SYSDEV)RMT_CMD")
#! Field("$(SYSDEV)RMT_CMD.FLNK",16777215,1,"$(SYSDEV)RMT_CMD.FLNK")
#! Link("$(SYSDEV)RMT_CMD.FLNK","$(SYSDEV)RMT_RSTS")
#! Record("$(SYSDEV)RMT_RSTS",500,18,0,1,"$(SYSDEV)RMT_RSTS")
#! Record("$(SYSDEV)RMT_STS",740,16,0,0,"$(SYSDEV)RMT_STS")
#! Record("$(SYSDEV)RLOC_CMD",980,22,0,0,"$(SYSDEV)RLOC_CMD")
#! Record("$(SYSDEV)RLOC_STS",1220,16,0,0,"$(SYSDEV)RLOC_STS")
#! Record("$(SYSDEV)S1-sts_",1460,14,0,0,"$(SYSDEV)S1-sts_")
#! Field("$(SYSDEV)S1-sts_.VAL",16777215,1,"$(SYSDEV)S1-sts_.VAL")
#! Record("_$(SYSDEV)S1-1sts_",1880,414,0,0,"_$(SYSDEV)S1-1sts_")
#! Field("_$(SYSDEV)S1-1sts_.INPA",16777215,0,"_$(SYSDEV)S1-1sts_.INPA")
#! Link("_$(SYSDEV)S1-1sts_.INPA","$(SYSDEV)S1-sts_.VAL")
#! Field("_$(SYSDEV)S1-1sts_.FLNK",16777215,1,"_$(SYSDEV)S1-1sts_.FLNK")
#! Link("_$(SYSDEV)S1-1sts_.FLNK","$(SYSDEV)S1-bit1_sts")
#! Field("_$(SYSDEV)S1-1sts_.VAL",16777215,1,"_$(SYSDEV)S1-1sts_.VAL")
#! Record("$(SYSDEV)S1-bit1_sts",2240,602,0,0,"$(SYSDEV)S1-bit1_sts")
#! Field("$(SYSDEV)S1-bit1_sts.INP",16777215,0,"$(SYSDEV)S1-bit1_sts.INP")
#! Link("$(SYSDEV)S1-bit1_sts.INP","_$(SYSDEV)S1-1sts_.VAL")
#! Record("$(SYSDEV)S1-bit1_desc",2560,608,0,0,"$(SYSDEV)S1-bit1_desc")
#! Record("_$(SYSDEV)S1-2sts_",1900,94,0,0,"_$(SYSDEV)S1-2sts_")
#! Field("_$(SYSDEV)S1-2sts_.INPA",16777215,0,"_$(SYSDEV)S1-2sts_.INPA")
#! Link("_$(SYSDEV)S1-2sts_.INPA","$(SYSDEV)S1-sts_.VAL")
#! Field("_$(SYSDEV)S1-2sts_.FLNK",16777215,1,"_$(SYSDEV)S1-2sts_.FLNK")
#! Link("_$(SYSDEV)S1-2sts_.FLNK","$(SYSDEV)S1-bit2_sts")
#! Field("_$(SYSDEV)S1-2sts_.VAL",16777215,1,"_$(SYSDEV)S1-2sts_.VAL")
#! Record("$(SYSDEV)S1-bit2_sts",2260,282,0,0,"$(SYSDEV)S1-bit2_sts")
#! Field("$(SYSDEV)S1-bit2_sts.INP",16777215,0,"$(SYSDEV)S1-bit2_sts.INP")
#! Link("$(SYSDEV)S1-bit2_sts.INP","_$(SYSDEV)S1-2sts_.VAL")
#! Record("$(SYSDEV)S1-bit2_desc",2540,228,0,0,"$(SYSDEV)S1-bit2_desc")
#! Record("_$(SYSDEV)RAW_CMD",3140,28,0,0,"_$(SYSDEV)RAW_CMD")
#! Record("_$(SYSDEV)RAW_QUERY",3380,28,0,0,"_$(SYSDEV)RAW_QUERY")
#! Record("_$(SYSDEV)RAW_REPLY",3620,22,0,0,"_$(SYSDEV)RAW_REPLY")
